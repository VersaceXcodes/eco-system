|-


```yaml
openapi: 3.0.0
info:
  title: EcoPulse API
  description: Environmental ecosystem monitoring platform API
  version: "1.0.0"
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  # AUTHENTICATION ENDPOINTS
  /api/auth/signup:
    post:
      summary: Register a new user
      operationId: authSignup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  minLength: 1
                  maxLength: 255
                password:
                  type: string
                  minLength: 8
                  maxLength: 255
                full_name:
                  type: string
                  minLength: 1
                  maxLength: 100
              required:
                - email
                - password
                - full_name
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  email:
                    type: string
                  full_name:
                    type: string
                  created_at:
                    type: string
                    format: date-time
        '400':
          description: Invalid input
        '409':
          description: Email already exists
      security: []
  /api/auth/login:
    post:
      summary: Authenticate user and get access token
      operationId: authLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: JWT access token
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
                      full_name:
                        type: string
                      expertise_level:
                        type: string
                        enum: [beginner, intermediate, expert]
                      credibility_score:
                        type: integer
                        minimum: 0
                        maximum: 100
        '401':
          description: Invalid credentials
      security: []
  /api/auth/verify-email:
    get:
      summary: Verify user email with token
      operationId: verifyEmail
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email verified successfully
        '400':
          description: Invalid or expired token
      security: []
  /api/auth/forgot-password:
    post:
      summary: Request password reset
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        '200':
          description: Password reset email sent
        '404':
          description: User not found
      security: []
  /api/auth/reset-password:
    post:
      summary: Reset password with token
      operationId: resetPassword
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  minLength: 8
                  maxLength: 255
              required:
                - password
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid or expired token
      security: []
  
  # USER ENDPOINTS
  /api/users/{user_id}:
    get:
      summary: Get user profile by ID
      operationId: getUserById
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile data
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  email:
                    type: string
                  full_name:
                    type: string
                  expertise_level:
                    type: string
                    enum: [beginner, intermediate, expert]
                  primary_location:
                    type: object
                    properties:
                      lat:
                        type: number
                      lng:
                        type: number
                      address:
                        type: string
                    nullable: true
                  interests:
                    type: array
                    items:
                      type: string
                  credibility_score:
                    type: integer
                    minimum: 0
                    maximum: 100
                  data_privacy_settings:
                    type: object
                    properties:
                      share_anonymized:
                        type: boolean
                      private_observations_visible:
                        type: boolean
                  created_at:
                    type: string
                    format: date-time
                  updated_at:
                    type: string
                    format: date-time
        '404':
          description: User not found
      security:
        - bearerAuth: []
    patch:
      summary: Update user profile
      operationId: updateUser
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                  minLength: 1
                  maxLength: 100
                expertise_level:
                  type: string
                  enum: [beginner, intermediate, expert]
                primary_location:
                  type: object
                  properties:
                    lat:
                      type: number
                    lng:
                      type: number
                    address:
                      type: string
                interests:
                  type: array
                  items:
                    type: string
                data_privacy_settings:
                  type: object
                  properties:
                    share_anonymized:
                      type: boolean
                    private_observations_visible:
                      type: boolean
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '403':
          description: Forbidden - can only update own profile
      security:
        - bearerAuth: []
  /api/users:
    get:
      summary: Search users
      operationId: searchUsers
      parameters:
        - name: query
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: sort_by
          in: query
          schema:
            type: string
            enum: [id, email, full_name, created_at, updated_at]
            default: created_at
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
      security:
        - bearerAuth: []
  
  # OBSERVATION ENDPOINTS
  /
